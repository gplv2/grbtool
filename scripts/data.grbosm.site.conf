map $http_origin $cors_header {
    default "";
    "~^https?://[^/]\.bitless\.be(:[0-9]+)?$" "$http_origin";
    "~^https?://[^/]*\.byteless\.net(:[0-9]+)?$" "$http_origin";
    "~^https?://[^/]*\.bitless\.be(:[0-9]+)?" "$http_origin";
    "~^https?://grbosm\.site" "$http_origin";
    "~^https?://*\.grbosm\.site" "$http_origin";
    "~^https?://grb\.app" "$http_origin";
    "~^https?://*\.grb\.app" "$http_origin";
}

server {
   listen 80;
   server_name data.grbosm.site;

   return 301 https://data.grbosm.site$request_uri;

   access_log  /var/log/nginx/redir_data.access.log my_combined;
   error_log  /var/log/nginx/redir_data.error.log;
}


server {
#ssl on;
   listen 443 ssl;

   charset utf-8;

   access_log  /var/log/nginx/api.log my_combined;
   error_log  /var/log/nginx/api.error.log;

   ssl_certificate /etc/letsencrypt/live/data.grbosm.site/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/data.grbosm.site/privkey.pem;

   ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
   ssl_ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4;

## Specifies that server ciphers should be preferred over client ciphers
   ssl_prefer_server_ciphers on;

   ssl_dhparam /etc/nginx/dhparam_bis.pem;

   keepalive_timeout 70;

   ssl_session_cache shared:SSL:10m;
   ssl_session_timeout 5m;

#listen [::]:81 default_server ipv6only=on;
#rewrite ^ $scheme://www.storesystems.nl$request_uri redirect;

#   For newer nginx than this one: 
#       ssl_stapling on;
#       ssl_stapling_verify on;#       ssl_trusted_certificate /etc/letsencrypt/live/data.grbosm.site/fullchain.pem;

   resolver 109.74.193.20 109.74.193.20 109.74.194.20 valid=300s;

   resolver_timeout 10s;

# Do not permit Content-Type sniffing.
   add_header X-Content-Type-Options nosniff;

   root /var/www/geo/;
   index index.php;

   gzip            on;
   gzip_min_length 1000;
   gzip_proxied    expired no-cache no-store private auth;
   gzip_types      text/plain application/xml application/json;

# Make site accessible from http://localhost/
   server_name data.grbosm.site;
 
   location /grb {
	# add_header Access-Control-Allow-Origin $cors_header;
	try_files $uri $uri/ /postgis_geojson.php?$query_string;
   }

   location /wr {
	# add_header Access-Control-Allow-Origin $cors_header;
	try_files $uri $uri/ /nwr_geojson.php?$query_string;
   }

   location / {
	# add_header Access-Control-Allow-Origin $cors_header;
	# add_header Access-Control-Allow-Origin $cors_header;
      	try_files $uri $uri/ /index.php?$query_string;
   }

#include /etc/nginx/global.conf;

   location = /favicon.ico { access_log off; log_not_found off; }
   location = /robots.txt  { access_log off; log_not_found off; }

   sendfile off;

   client_max_body_size 100m;

   location ~ \.php$ {
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      #fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
      #fastcgi_pass 127.0.0.1:9010;
      fastcgi_pass apiphp;
      fastcgi_index index.php;
      include fastcgi_params;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

      fastcgi_intercept_errors off;
      fastcgi_buffer_size 16k;
      fastcgi_buffers 4 16k;
      fastcgi_connect_timeout 300;
      fastcgi_send_timeout 300;
      fastcgi_read_timeout 300;

# cors configuration
# whitelist of allowed domains, via a regular expression
# if ($http_origin ~* (http://localhost(:[0-9]+)?)) 
      if ($cors_header) { # yeah, for local development. tailor your regex as needed
         set $cors "true";
      }

# apparently, the following three if statements create a flag for "compound conditions"
      if ($request_method = OPTIONS) {
         set $cors "${cors}options";
      }

      if ($request_method = GET) {
         set $cors "${cors}get";
      }

      if ($request_method = POST) {
         set $cors "${cors}post";
      }

# now process the flag
      if ($cors = 'trueget') {
         add_header 'Access-Control-Allow-Origin' "$cors_header";
         add_header 'Access-Control-Allow-Credentials' 'true';
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
	#add_header Access-Control-Allow-Headers "Authorization, X-Requested-With";
	# add_header Access-Control-Allow-Credentials "true";
      }

      if ($cors = 'truepost') {
         add_header 'Access-Control-Allow-Origin' "$cors_header";
         add_header 'Access-Control-Allow-Credentials' 'true';
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
      }

      if ($cors = 'trueoptions') {
         add_header 'Access-Control-Allow-Origin' "$cors_header";
         add_header 'Access-Control-Allow-Credentials' 'true';

         add_header 'Access-Control-Max-Age' 172800; # cache preflight value for 2 days
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
         add_header 'Access-Control-Allow-Credentials' "true";
         add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

# add_header 'Content-Length' 0;  -> dont send with 204 , only with 200
# return 200;
         add_header 'Content-Type' 'text/plain charset=UTF-8';
         return 204;
      }
   }

   location ~ /\.ht {
      deny all;
   }

}

